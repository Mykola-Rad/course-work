// <auto-generated />
using System;
using GenerateData.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GenerateData.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250430211723_AddUserRoleEnumType")]
    partial class AddUserRoleEnumType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "invoice_type", new[] { "supply", "transfer", "release" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "owner", "manager", "storage_keeper" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GenerateData.Models.Counterparty", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone_number");

                    b.HasKey("Name")
                        .HasName("provider_pkey");

                    b.HasIndex(new[] { "Email" }, "unique_counterparty_email")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "unique_counterparty_phone_number")
                        .IsUnique();

                    b.ToTable("counterparty", (string)null);
                });

            modelBuilder.Entity("GenerateData.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("invoice_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceId"));

                    b.Property<string>("CounterpartyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("counterparty_name");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("ReceiverKeeperPhone")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("receiver_keeper_phone");

                    b.Property<string>("ReceiverStorageName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("receiver_storage_name");

                    b.Property<string>("SenderKeeperPhone")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("sender_keeper_phone");

                    b.Property<string>("SenderStorageName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sender_storage_name");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(20, 2)
                        .HasColumnType("numeric(20,2)")
                        .HasColumnName("total_price");

                    b.Property<int>("Type")
                        .HasColumnType("invoice_type")
                        .HasColumnName("type");

                    b.HasKey("InvoiceId")
                        .HasName("invoice_pkey");

                    b.HasIndex("CounterpartyName");

                    b.HasIndex("ReceiverKeeperPhone");

                    b.HasIndex("ReceiverStorageName");

                    b.HasIndex("SenderKeeperPhone");

                    b.HasIndex("SenderStorageName");

                    b.ToTable("invoice", (string)null);
                });

            modelBuilder.Entity("GenerateData.Models.ListEntry", b =>
                {
                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("product_name");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("invoice_id");

                    b.Property<decimal>("Count")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("count");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.HasKey("ProductName", "InvoiceId")
                        .HasName("list_entry_pkey");

                    b.HasIndex("InvoiceId");

                    b.ToTable("list_entry", (string)null);
                });

            modelBuilder.Entity("GenerateData.Models.Product", b =>
                {
                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("product_name");

                    b.Property<decimal>("LastPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("last_price");

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("unit_code");

                    b.HasKey("ProductName")
                        .HasName("product_pkey");

                    b.HasIndex("UnitCode");

                    b.HasIndex(new[] { "ProductName" }, "unique_product_name")
                        .IsUnique();

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("GenerateData.Models.ProductUnit", b =>
                {
                    b.Property<string>("UnitCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("unit_code");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unit_name");

                    b.HasKey("UnitCode")
                        .HasName("product_units_pkey");

                    b.HasIndex(new[] { "UnitName" }, "unique_product_unit_name")
                        .IsUnique();

                    b.ToTable("product_units", (string)null);
                });

            modelBuilder.Entity("GenerateData.Models.Storage", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("house_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("region");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street_name");

                    b.HasKey("Name")
                        .HasName("storage_pkey");

                    b.ToTable("storage", (string)null);
                });

            modelBuilder.Entity("GenerateData.Models.StorageKeeper", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("StorageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("storage_name");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("PhoneNumber")
                        .HasName("storage_keeper_pkey");

                    b.HasIndex("StorageName");

                    b.HasIndex(new[] { "Username" }, "storage_keeper_username_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "unique_storage_keeper_email")
                        .IsUnique();

                    b.ToTable("storage_keeper", (string)null);
                });

            modelBuilder.Entity("GenerateData.Models.StorageProduct", b =>
                {
                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("product_name");

                    b.Property<string>("StorageName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("storage_name");

                    b.Property<decimal>("Count")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("count");

                    b.Property<decimal>("MinimalCount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("minimal_count");

                    b.HasKey("ProductName", "StorageName")
                        .HasName("storage_product_pkey");

                    b.HasIndex("StorageName");

                    b.ToTable("storage_product", (string)null);
                });

            modelBuilder.Entity("GenerateData.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .HasColumnName("username");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("user_role")
                        .HasColumnName("role");

                    b.HasKey("Username")
                        .HasName("user_pkey");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("GenerateData.Models.Invoice", b =>
                {
                    b.HasOne("GenerateData.Models.Counterparty", "CounterpartyNameNavigation")
                        .WithMany("Invoices")
                        .HasForeignKey("CounterpartyName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("invoice_counterparty_name_fkey");

                    b.HasOne("GenerateData.Models.StorageKeeper", "ReceiverKeeperPhoneNavigation")
                        .WithMany("InvoiceReceiverKeeperPhoneNavigations")
                        .HasForeignKey("ReceiverKeeperPhone")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("invoice_receiver_keeper_phone_fkey");

                    b.HasOne("GenerateData.Models.Storage", "ReceiverStorageNameNavigation")
                        .WithMany("InvoiceReceiverStorageNameNavigations")
                        .HasForeignKey("ReceiverStorageName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("invoice_receiver_storage_name_fkey");

                    b.HasOne("GenerateData.Models.StorageKeeper", "SenderKeeperPhoneNavigation")
                        .WithMany("InvoiceSenderKeeperPhoneNavigations")
                        .HasForeignKey("SenderKeeperPhone")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("invoice_sender_keeper_phone_fkey");

                    b.HasOne("GenerateData.Models.Storage", "SenderStorageNameNavigation")
                        .WithMany("InvoiceSenderStorageNameNavigations")
                        .HasForeignKey("SenderStorageName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("invoice_sender_storage_name_fkey");

                    b.Navigation("CounterpartyNameNavigation");

                    b.Navigation("ReceiverKeeperPhoneNavigation");

                    b.Navigation("ReceiverStorageNameNavigation");

                    b.Navigation("SenderKeeperPhoneNavigation");

                    b.Navigation("SenderStorageNameNavigation");
                });

            modelBuilder.Entity("GenerateData.Models.ListEntry", b =>
                {
                    b.HasOne("GenerateData.Models.Invoice", "Invoice")
                        .WithMany("ListEntries")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("list_entry_invoice_id_fkey");

                    b.HasOne("GenerateData.Models.Product", "ProductNameNavigation")
                        .WithMany("ListEntries")
                        .HasForeignKey("ProductName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("list_entry_product_name_fkey");

                    b.Navigation("Invoice");

                    b.Navigation("ProductNameNavigation");
                });

            modelBuilder.Entity("GenerateData.Models.Product", b =>
                {
                    b.HasOne("GenerateData.Models.ProductUnit", "UnitCodeNavigation")
                        .WithMany("Products")
                        .HasForeignKey("UnitCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("product_unit_code_fkey");

                    b.Navigation("UnitCodeNavigation");
                });

            modelBuilder.Entity("GenerateData.Models.StorageKeeper", b =>
                {
                    b.HasOne("GenerateData.Models.Storage", "StorageNameNavigation")
                        .WithMany("StorageKeepers")
                        .HasForeignKey("StorageName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("storage_keeper_storage_name_fkey");

                    b.HasOne("GenerateData.Models.User", "UsernameNavigation")
                        .WithOne("StorageKeeper")
                        .HasForeignKey("GenerateData.Models.StorageKeeper", "Username")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("storage_keeper_username_fkey");

                    b.Navigation("StorageNameNavigation");

                    b.Navigation("UsernameNavigation");
                });

            modelBuilder.Entity("GenerateData.Models.StorageProduct", b =>
                {
                    b.HasOne("GenerateData.Models.Product", "ProductNameNavigation")
                        .WithMany("StorageProducts")
                        .HasForeignKey("ProductName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("storage_product_product_name_fkey");

                    b.HasOne("GenerateData.Models.Storage", "StorageNameNavigation")
                        .WithMany("StorageProducts")
                        .HasForeignKey("StorageName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("storage_product_storage_name_fkey");

                    b.Navigation("ProductNameNavigation");

                    b.Navigation("StorageNameNavigation");
                });

            modelBuilder.Entity("GenerateData.Models.Counterparty", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("GenerateData.Models.Invoice", b =>
                {
                    b.Navigation("ListEntries");
                });

            modelBuilder.Entity("GenerateData.Models.Product", b =>
                {
                    b.Navigation("ListEntries");

                    b.Navigation("StorageProducts");
                });

            modelBuilder.Entity("GenerateData.Models.ProductUnit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GenerateData.Models.Storage", b =>
                {
                    b.Navigation("InvoiceReceiverStorageNameNavigations");

                    b.Navigation("InvoiceSenderStorageNameNavigations");

                    b.Navigation("StorageKeepers");

                    b.Navigation("StorageProducts");
                });

            modelBuilder.Entity("GenerateData.Models.StorageKeeper", b =>
                {
                    b.Navigation("InvoiceReceiverKeeperPhoneNavigations");

                    b.Navigation("InvoiceSenderKeeperPhoneNavigations");
                });

            modelBuilder.Entity("GenerateData.Models.User", b =>
                {
                    b.Navigation("StorageKeeper");
                });
#pragma warning restore 612, 618
        }
    }
}
